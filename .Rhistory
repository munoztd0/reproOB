pp + html_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.8, "cm"), axis.text.x = element_text(size = 16))
plt = pp + averaged_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.8, "cm"), axis.text.x = element_text(size = 16))
cairo_pdf('figures/Figure_PIT_time.pdf')
print(plt)
dev.off()
# define as.factors
fac <- c("id", "trial", "condition", "trialxcondition", "gender", "group")
HED[fac] <- lapply(HED[fac], factor)
#revalue all catego
HED$condition = as.factor(revalue(HED$condition, c(MilkShake="1", Empty="-1"))) #change value of condition
HED$condition <- relevel(HED$condition, "1") # Make MilkShake first
HED$group = as.factor(revalue(HED$group, c(obese="1", control="-1"))) #change value of group
# create Intensity and Familiarity diff
bs = ddply(HED, .(id, condition), summarise, int = mean(perceived_intensity, na.rm = TRUE), fam = mean(perceived_familiarity, na.rm = TRUE))
Empty = subset(bs, condition == "-1"); Milkshake = subset(bs, condition == "1"); diff = Empty;
diff$int = Milkshake$int - Empty$int; diff$fam = Milkshake$fam - Empty$fam;
HED = merge(x = HED, y = diff[ , c("int", "fam", 'id')], by = "id", all.x=TRUE)
#center covariates
numer <- c("piss", "thirsty", "hungry", "diff_piss", "diff_thirsty", "diff_hungry", "age", "fam", "int")
HED = HED %>% group_by %>% mutate_at(numer, scale)
HED$intensity = HED$int; HED$familiarity = HED$fam
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:9,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[10:14,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
null = lmer(perceived_liking ~ group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,2] - test[2,2])/2)
BF_cond
BF_cond = exp((test[1,3] - test[2,3])/2)
BF_cond
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group + condition:group  + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
BF_cond
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
BF_cond
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
BF_group
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_thirsty = exp((test[1,3] - test[2,3])/2)
BF_thirsty
model
main = lmer(perceived_liking ~ condition*group + thirsty + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_thirsty = exp((test[1,3] - test[2,3])/2)
BF_thirsty
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry = exp((test[1,3] - test[2,3])/2)
BF_hungry
model
test = anova(main, null, test = 'Chisq')
BF_hungry = exp((test[1,3] - test[2,3])/2)
BF_hungry
main = lmer(perceived_liking ~ condition*group + thirsty + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry_int = exp((test[1,3] - test[2,3])/2)
BF_hungry_int
test
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry_int = exp((test[1,3] - test[2,3])/2)
BF_hungry_int
model
exp((test[1,2] - test[2,2])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_fam = exp((test[1,3] - test[2,3])/2)
BF_fam
model
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
BF_fam
test
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
BF_int
model
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_int = exp((test[1,3] - test[2,3])/2)
BF_group_int
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_int_inter = exp((test[1,3] - test[2,3])/2)
BF_int_inter
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition +  familiarity  + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry  +  familiarity  + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_int_inter = exp((test[1,3] - test[2,3])/2)
BF_int_inter
test
model
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:8,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[9:13,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_hungry = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_hungry_inter = exp((test[1,3] - test[2,3])/2)
table = nice(model)
table$BF = BF_cond
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_inter
table$BF[5] = BF_hungry_int
table = nice(model)
table
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
table
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:8,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[9:13,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_hungry = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_inter = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_hungry_inter = exp((test[1,3] - test[2,3])/2)
table = nice(model)
table$BF = BF_cond
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hunfry_inter
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:8,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[9:13,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_hungry = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_inter = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_hungry_inter = exp((test[1,3] - test[2,3])/2)
table = nice(model)
table$BF = BF_cond
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hungry_inter
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table$BF = signif(table$BF,3)
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table = nice(model)
table$BF = signif(BF_cond,3)
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hungry_inter
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table = nice(model)
table$BF = c(0,0,0,0,0,0,0)
table$BF[1] = signif(BF_cond,3)
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hungry_inter
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table
BF_cond
# PLOT OVERTIME
labels <- c("-1" = "Lean", "1" = "Obese")
PIT.p <- summarySEwithin(PIT.clean,
measurevar = "AUC",
withinvars = c("trialxcondition","condition"),
betweenvars = "group",
idvar = "id")
PIT.p$trial <- as.numeric(PIT.p$trialxcondition)
PIT.p = select(PIT.p, c('trial', 'N' , 'AUC', 'sd', 'se', 'ci', 'condition', 'group'))
# plot
pp <- ggplot(PIT.p, aes(x = as.numeric(trial), y = AUC,
color = condition,
fill  = condition))+
geom_line(alpha = .5, size = 1, show.legend = F) +
geom_ribbon(aes(ymax = AUC + se, ymin = AUC - se),  alpha=0.4) +
geom_point() +
ylab('Mobilized effort (AUC)')+
xlab('Trial')+
scale_color_manual(labels = c('-1'= 'CS-', "1" = 'CS+'), name="",
values = c("1"= pal[2], '-1'= pal[1])) +
scale_fill_manual(labels = c('-1'= 'CS-', "1" = 'CS+'), name="",
values = c("1"= pal[2], '-1'= pal[1])) +
scale_y_continuous(expand = c(0, 0),  limits = c(50,200),  breaks=c(seq.int(50,200, by = 50))) +
scale_x_continuous(expand = c(0, 0),  limits = c(0,15),  breaks=c(seq.int(1,15, by = 2))) +
theme_bw() +
facet_wrap(~group, labeller=labeller(group = labels))
pp + html_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.8, "cm"), axis.text.x = element_text(size = 16))
plt = pp + averaged_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.5, "cm"), axis.text.x = element_text(size = 16))
use_docker()
reprouse_docker()
repro::use_docker()
repro::automate()
repro::use_docker()
repro::automate()
repro::use_docker()
repro::automate()
repro::use_docker()
repro::automate()
repro::automate_docker()
repro::automate_make(
)
repro::automate_make()
repro::rerun()
repro::use_docker()
repro::automate_make()
repro::rerun()
repro::automate_make()
repro::automate()
repro::rerun()
repro::automate_make()
repro::automate()
repro::automate()
repro::automate_make()
repro::use_docker()
repro::automate()
repro::check_package()
repro::check_worcs()
repro::check_worcs()
repro::check_worcs()
repro::check_worcs()
repro::check_github_ssh(
)
repro::check_github_ssh()
repro::check_renv()
knitr::opts_chunk$set(echo = FALSE, warnings=FALSE)
library(repro)
# load packages from yaml header
automate_load_packages()
# include external scripts
automate_load_scripts()
# load data
info <- automate_load_data(info, read.csv, stringsAsFactors = T)
knitr::opts_chunk$set(echo = FALSE, warnings=FALSE)
library(repro)
# load packages from yaml header
automate_load_packages()
# include external scripts
automate_load_scripts()
# load data
info <- automate_load_data(info, read.csv, stringsAsFactors = T)
intern <- automate_load_data(intern, read.csv, stringsAsFactors = T)
PAV <- automate_load_data(PAV, read.csv, stringsAsFactors = T)
INST <- automate_load_data(INST, read.csv, stringsAsFactors = T)
PIT <- automate_load_data(PIT, read.csv, stringsAsFactors = T)
HED <- automate_load_data(HED, read.csv, stringsAsFactors = T)
check_git()
check_make()
check_docker()
options(scipen = 666, warn=-1, contrasts=c("contr.sum","contr.poly"), mc.cores = parallel::detectCores()) #remove scientific notation # remove warnings #set contrasts to sum !
set.seed(666) #set random seed
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')) #set "better" lmer optimizer #nolimit # yoloptimizer
emm_options(pbkrtest.limit = 5000) #increase repetitions limit
cl <- parallel::detectCores() #to mulithread
source('R/plots.R', echo=F)# plot specification
source('R/utils.R', echo=F)# useful functions
#subset only pretest
tables <- c("PAV","INST","PIT","HED", "intern")
dflist <- lapply(mget(tables),function(x)subset(x, session == 'second'))
list2env(dflist, envir=.GlobalEnv)
#exclude participants (242 really outlier everywhere, 256 can't do the task, 114 & 228 REALLY hated the solution and thus didn't "do" the conditioning) & 123 and 124 have imcomplete data
`%notin%` <- Negate(`%in%`)
dflist <- lapply(mget(tables),function(x)filter(x, id %notin% c(242, 256, 114, 228, 123, 124)))
list2env(dflist, envir=.GlobalEnv)
#merge with info
tables = tables[-length(tables)] # remove intern
dflist <- lapply(mget(tables),function(x)merge(x, info, by = "id"))
list2env(dflist, envir=.GlobalEnv)
# creates internal states variables for each data
listA = 2:5
def = function(data, number){
baseINTERN = subset(intern, phase == number)
data = merge(x = get(data), y = baseINTERN[ , c("thirsty", 'hungry', 'id')], by = "id", all.x=TRUE)
# diffINTERN = subset(intern, phase == number | phase == number+1) #before and after
# before = subset(diffINTERN, phase == number); after = subset(diffINTERN, phase == number+1); diff = after
# diff$diff_piss = diff$piss - before$piss
# diff$diff_thirsty = diff$thirsty - before$thirsty
# diff$diff_hungry = diff$hungry - before$hungry
# data= merge(data, y = diff[ , c("diff_piss", "diff_thirsty", 'diff_hungry', 'id')], by = "id", all.x=TRUE)
return(data)
}
dflist = mapply(def,tables,listA)
list2env(dflist, envir=.GlobalEnv)
#center covariates
numer <- c("thirsty", "hungry", "age")
tables <- c("PAV","INST","PIT","HED")
dflist <- lapply(mget(tables),function(x) x %>% group_by %>% mutate_at(numer, scale))
list2env(dflist, envir=.GlobalEnv)
#imput mean (0 since its mean centered) for the two participant that have missing covariate (MAR) data so we can still use them in ANCOVA
tables <- c("PAV","INST","PIT","HED")
dflist <- lapply(mget(tables),function(x) imput(x))
list2env(dflist, envir=.GlobalEnv)
# prepro RT PAv -----------------------------------------------------------
# get times in milliseconds
PAV$RT               <- PAV$RT * 1000
#Preprocessing
PAV$condition <- droplevels(PAV$condition, exclude = "Baseline")
acc_bef = mean(PAV$ACC, na.rm = TRUE) #0.93
full = length(PAV$RT)
##shorter than 100ms and longer than 3sd+mean
PAV.clean <- filter(PAV, RT >= 100) # min RT is
PAV.clean <- ddply(PAV.clean, .(id), transform, RTm = mean(RT))
PAV.clean <- ddply(PAV.clean, .(id), transform, RTsd = sd(RT))
PAV.clean <- filter(PAV.clean, RT <= RTm+3*RTsd)
# calculate the dropped data in the preprocessing
clean = length(PAV.clean$RT)
dropped = full-clean
(dropped*100)/full
PAV = PAV.clean
# define as.factors
fac <- c("id", "trial", "condition", "group" ,"trialxcondition", "gender")
PAV.clean[fac] <- lapply(PAV.clean[fac], factor)
#revalue all catego
PAV.clean$group = as.factor(revalue(PAV.clean$group, c(control="-1", obese="1"))) #change value of group
PAV.clean$condition = as.factor(revalue(PAV.clean$condition, c(CSminus="-1", CSplus="1"))); PAV.clean$condition <- factor(PAV.clean$condition, levels = c("1", "-1"))#change value of condition
PAV.means <- aggregate(PAV.clean$RT, by = list(PAV.clean$id, PAV.clean$condition, PAV.clean$liking, PAV.clean$group, PAV.clean$age, PAV.clean$gender, PAV.clean$group), FUN='mean') # extract means
colnames(PAV.means) <- c('id','condition','liking','group', 'RT')
df = PAV; df$group = as.factor(revalue(as.factor(df$group), c("control"="Lean", "obese"="Obese")));
AGE = ddply(df,~group,summarise,mean=mean(age),sd=sd(age), min = min(age), max = max(age));
AGE %>%
kbl(caption ="AGE", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T)
BMI = ddply(df,~group,summarise,mean=mean(BMI_t1),sd=sd(BMI_t1), min = min(BMI_t1), max = max(BMI_t1));
BMI %>%
kbl(caption ="BMI", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T)
GENDER = ddply(df, .(id, group), summarise, gender=mean(as.numeric(gender)))  %>%
group_by(gender, group) %>%
tally(); GENDER$gender = as.factor(revalue(as.factor(GENDER$gender), c("0"="Men", "1"="Women")));
GENDER %>% kbl(caption ="GENDER") %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T)
N_group = ddply(df, .(id, group), summarise, group=mean(as.numeric(group)))  %>%
group_by(group) %>% tally(); N_group$group = as.factor(revalue(as.factor(N_group$group), c("1"="Lean", "2"="Obese")));
N_group %>%
kbl(caption ="Group") %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T)
