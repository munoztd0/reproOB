#model = mixed(formula, data = PIT.clean, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = PIT.clean, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Mobilized effort (AUC)", file = "tmp/temp3.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
tables <- list.clean(readHTMLTable("tmp/temp3.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:5,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[6:10,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(AUC ~ condition + group + hungry + hungry:condition  + (condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
null = lmer(AUC ~ group + hungry + hungry:condition  + (condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,2] - test[2,2])/2)
main = lmer(AUC ~ condition + group + hungry + hungry:condition  + (condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
null = lmer(AUC ~ condition + hungry + hungry:condition  + (condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,2] - test[2,2])/2)
main = lmer(formula, data = PIT.clean, control = control, REML = F)
null = lmer(AUC ~ condition+ group + hungry + hungry:condition  + (condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_inter = exp((test[1,2] - test[2,2])/2)
main = lmer(AUC ~ condition* group + thirsty + hungry  + (condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
null = lmer(AUC ~ condition*group + thirsty +(condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F) #here is jsut added "thirsty" to make that the two models are fitted with the same number of partcipants, but this doesnt changew anything for hungry
test = anova(main, null, test = 'Chisq')
BF_hungry = exp((test[1,2] - test[2,2])/2)
main = lmer(formula, data = PIT.clean, control = control, REML = F)
null = lmer(AUC ~ condition*group + hungry + (condition|id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry_int = exp((test[1,2] - test[2,2])/2)
table = nice(model)
table$BF = BF_cond
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_inter
table$BF[5] = BF_hungry_int
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
#p_cond = emmeans(mod, pairwise~ condition, side = ">"); p_cond #for condition (CS+ > CS- right sided)
#CI_cond = confint(emmeans(mod, pairwise~ condition),level = 0.95, method = c("boot"), nsim = 5000); #CI_cond$contrasts #get CI condition
inter = emmeans(mod, pairwise~ condition|group, adjust = "tukey", side = ">"); inter$contrasts  #for group X condition (adjusted but still right sided)
CI_inter = confint(emmeans(mod, pairwise~ condition|group),level = 0.95,method = c("boot"),nsim = 5000); CI_inter$contrasts ##get CI inter
tmp = as_tibble(inter$contrasts);
tab =as_tibble(CI_inter$contrasts); tab$contrast = "CS+ > CS-"; tab$group = c("Lean", "Obese"); tab = select(tab, -c('df')); tab$df = c(26,61); tab$t = tmp$t.ratio; tab$p = tmp$p.value; t
tab %>% kbl(caption = "Post-Hoc test (pairwise~ condition|group, adjust = tukey)", digits = 3) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
knitr::opts_chunk$set(echo = FALSE, dev.args = list(png = list(type = "cairo")))
# create bin for each mini block
#PIT.clean$trialxcondition    <- as.numeric(PIT.clean$trialxcondition)
#PIT.clean  <- ddply(PIT.clean, "id", transform, bin = as.numeric(cut2(trialxcondition, g = 5)))
PIT.s <- subset (PIT.clean, condition == '1'| condition == '-1')
PIT.s$trialxcondition <- factor(PIT.s$trialxcondition)
PIT.means <- aggregate(PIT.s$AUC, by = list(PIT.s$id, PIT.s$condition, PIT.s$group), FUN='mean') # extract means
colnames(PIT.means) <- c('id','condition', 'group', 'force')
#PIT.trial <- aggregate(PIT.s$AUC, by = list(PIT.s$id, PIT.s$trialxcondition), FUN='mean') # extract means
#colnames(PIT.trial) <- c('id','trialxcondition','force')
### Plot between contrasts
df_est = emmeans(mod, pairwise~ condition|group) # estimate contrasts means by group from the model
dfP = data.frame(df_est$contrasts); dfP$force = dfP$estimate #create a dataframe
CSp = subset(PIT.means, condition == '1'); CSm = subset(PIT.means, condition == '-1'); cont.means = CSp
cont.means$force = CSp$force - CSm$force;
dfP$groupi <- ifelse(dfP$group == "1", -0.25, 0.25)
cont.means$groupi <- ifelse(cont.means$group == "1", -0.25, 0.25)
set.seed(666)
cont.means <- cont.means %>% mutate(groupjit = jitter(as.numeric(groupi), 0.25),
grouping = interaction(id, groupi))
pp <- ggplot(cont.means, aes(x = groupi, y = force,
fill = group, color = group)) +
geom_hline(yintercept=0, linetype="dashed", size=0.4, alpha=0.8) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(fill = group, color = NA))+
geom_point(aes(x = groupjit), alpha = .3,) +
geom_crossbar(data = dfP, aes(y = force, ymin=force-SE, ymax=force+SE), width = 0.2 , alpha = 0.1)+
#geom_errorbar(data = dfP,aes(group = group, ymin=force-SE, ymax=force+SE),position=position_nudge(x=0.15), size=0.5, width=0.1,  color = "black") +
ylab('\u0394 Mobilized effort (CS+ > CS-)')+
xlab('')+
scale_fill_manual(values=c("1" = pal[6],"-1"=pal[1]), guide = 'none') +
scale_color_manual(values=c("1" = pal[6],"-1"=pal[1]), guide = 'none')  +
scale_y_continuous(expand = c(0, 0), breaks = c(seq.int(-200,200, by = 50)), limits = c(-200.5,200.5)) +
scale_x_continuous(labels=c("Obese", "Lean"),breaks = c(-.25,.25), limits = c(-.5,.5)) +
theme_bw()
plt = pp + averaged_theme
pp + html_theme
cairo_pdf('figures/Figure_PIT_con.pdf')
print(plt)
dev.off()
# PLOT OVERTIME
labels <- c("-1" = "Lean", "1" = "Obese")
PIT.p <- summarySEwithin(PIT.clean,
measurevar = "AUC",
withinvars = c("trialxcondition","condition"),
betweenvars = "group",
idvar = "id")
PIT.p$trial <- as.numeric(PIT.p$trialxcondition)
PIT.p = select(PIT.p, c('trial', 'N' , 'AUC', 'sd', 'se', 'ci', 'condition', 'group'))
# plot
pp <- ggplot(PIT.p, aes(x = as.numeric(trial), y = AUC,
color = condition,
fill  = condition))+
geom_line(alpha = .5, size = 1, show.legend = F) +
geom_ribbon(aes(ymax = AUC + se, ymin = AUC - se),  alpha=0.4) +
geom_point() +
ylab('Mobilized effort (AUC)')+
xlab('Trial')+
scale_color_manual(labels = c('-1'= 'CS-', "1" = 'CS+'), name="",
values = c("1"= pal[2], '-1'= pal[1])) +
scale_fill_manual(labels = c('-1'= 'CS-', "1" = 'CS+'), name="",
values = c("1"= pal[2], '-1'= pal[1])) +
scale_y_continuous(expand = c(0, 0),  limits = c(50,200),  breaks=c(seq.int(50,200, by = 50))) +
scale_x_continuous(expand = c(0, 0),  limits = c(0,15),  breaks=c(seq.int(1,15, by = 2))) +
theme_bw() +
facet_wrap(~group, labeller=labeller(group = labels))
pp + html_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.8, "cm"), axis.text.x = element_text(size = 16))
plt = pp + averaged_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.8, "cm"), axis.text.x = element_text(size = 16))
cairo_pdf('figures/Figure_PIT_time.pdf')
print(plt)
dev.off()
# define as.factors
fac <- c("id", "trial", "condition", "trialxcondition", "gender", "group")
HED[fac] <- lapply(HED[fac], factor)
#revalue all catego
HED$condition = as.factor(revalue(HED$condition, c(MilkShake="1", Empty="-1"))) #change value of condition
HED$condition <- relevel(HED$condition, "1") # Make MilkShake first
HED$group = as.factor(revalue(HED$group, c(obese="1", control="-1"))) #change value of group
# create Intensity and Familiarity diff
bs = ddply(HED, .(id, condition), summarise, int = mean(perceived_intensity, na.rm = TRUE), fam = mean(perceived_familiarity, na.rm = TRUE))
Empty = subset(bs, condition == "-1"); Milkshake = subset(bs, condition == "1"); diff = Empty;
diff$int = Milkshake$int - Empty$int; diff$fam = Milkshake$fam - Empty$fam;
HED = merge(x = HED, y = diff[ , c("int", "fam", 'id')], by = "id", all.x=TRUE)
#center covariates
numer <- c("piss", "thirsty", "hungry", "diff_piss", "diff_thirsty", "diff_hungry", "age", "fam", "int")
HED = HED %>% group_by %>% mutate_at(numer, scale)
HED$intensity = HED$int; HED$familiarity = HED$fam
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:9,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[10:14,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
null = lmer(perceived_liking ~ group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = PIT.clean, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,2] - test[2,2])/2)
BF_cond
BF_cond = exp((test[1,3] - test[2,3])/2)
BF_cond
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group + condition:group  + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
BF_cond
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
BF_cond
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
BF_group
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_thirsty = exp((test[1,3] - test[2,3])/2)
BF_thirsty
model
main = lmer(perceived_liking ~ condition*group + thirsty + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_thirsty = exp((test[1,3] - test[2,3])/2)
BF_thirsty
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry = exp((test[1,3] - test[2,3])/2)
BF_hungry
model
test = anova(main, null, test = 'Chisq')
BF_hungry = exp((test[1,3] - test[2,3])/2)
BF_hungry
main = lmer(perceived_liking ~ condition*group + thirsty + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry_int = exp((test[1,3] - test[2,3])/2)
BF_hungry_int
test
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_hungry_int = exp((test[1,3] - test[2,3])/2)
BF_hungry_int
model
exp((test[1,2] - test[2,2])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_fam = exp((test[1,3] - test[2,3])/2)
BF_fam
model
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
BF_fam
test
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
BF_int
model
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_int = exp((test[1,3] - test[2,3])/2)
BF_group_int
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_int_inter = exp((test[1,3] - test[2,3])/2)
BF_int_inter
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition +  familiarity  + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry  +  familiarity  + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_int_inter = exp((test[1,3] - test[2,3])/2)
BF_int_inter
test
model
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:8,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[9:13,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_hungry = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + intensity:condition + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_hungry_inter = exp((test[1,3] - test[2,3])/2)
table = nice(model)
table$BF = BF_cond
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_inter
table$BF[5] = BF_hungry_int
table = nice(model)
table
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
table
# -------------------------------------- STATS -----------------------------------------------
formula = 'perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition)'
### Linear Mixed Models
# Mixed is just a wrapper for lmer to get p-values from parametric bootstrapping #but set to method "LRT" and remove "args_test" to quick check ##
model = mixed(formula, data = HED, method = "LRT", control = control, REML = FALSE); model
#model = mixed(formula, data = HED, method = "PB", control = control, REML = FALSE, args_test = list(nsim = 10000, cl=cl))
ref_grid(model)  #triple check everything is centered at 0
mod <- lmer(formula, data = HED, control = control, REML = T) # recompute model with REML = T now for further analysis
tab_model(mod, show.p = F,show.intercept = F, show.se = T, show.ci = F, title ="", show.re.var = F, digits = 3, dv.labels = "Pleasantness Ratings", file = "tmp/temp4.html") #, pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:8,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[9:13,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_hungry = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_inter = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_hungry_inter = exp((test[1,3] - test[2,3])/2)
table = nice(model)
table$BF = BF_cond
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hunfry_inter
tables <- list.clean(readHTMLTable("tmp/temp4.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:8,1:3] %>% kbl(caption ="Mobilized effort (AUC)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)  %>%  row_spec(0,bold=T)
tmp =tables2[9:13,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ group+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_cond = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition+group + thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+ thirsty + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + thirsty  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # here i added thirsty to make sure the to mdoels are fitted on the same number of responses
BF_hungry = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry+ hungry:condition + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_fam = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group + hungry + hungry:condition + familiarity +  (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_int = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group  + hungry + hungry:condition  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition+group + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq')
BF_group_inter = exp((test[1,3] - test[2,3])/2)
main = lmer(perceived_liking ~ condition*group + thirsty + hungry + hungry:condition +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
null = lmer(perceived_liking ~ condition*group+ thirsty + hungry  +  familiarity + intensity + (condition |id) + (1|trialxcondition), data = HED, control = control, REML = F)
test = anova(main, null, test = 'Chisq') # same here
BF_hungry_inter = exp((test[1,3] - test[2,3])/2)
table = nice(model)
table$BF = BF_cond
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hungry_inter
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table$BF = signif(table$BF,3)
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table = nice(model)
table$BF = signif(BF_cond,3)
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hungry_inter
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table = nice(model)
table$BF = c(0,0,0,0,0,0,0)
table$BF[1] = signif(BF_cond,3)
table$BF[2] = BF_group
table$BF[3] = BF_hungry
table$BF[4] = BF_fam
table$BF[5] = BF_int
table$BF[6] = BF_group_inter
table$BF[7] = BF_hungry_inter
table %>% kbl(caption = "Parametric Bootstrap Test method to evaluate significance of fixed effects in mixed-effects models (using MLE fit, nsim = 500) and Bayes Factor from mixed models (see Wagenmakers, 2007)", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T)
table
BF_cond
# PLOT OVERTIME
labels <- c("-1" = "Lean", "1" = "Obese")
PIT.p <- summarySEwithin(PIT.clean,
measurevar = "AUC",
withinvars = c("trialxcondition","condition"),
betweenvars = "group",
idvar = "id")
PIT.p$trial <- as.numeric(PIT.p$trialxcondition)
PIT.p = select(PIT.p, c('trial', 'N' , 'AUC', 'sd', 'se', 'ci', 'condition', 'group'))
# plot
pp <- ggplot(PIT.p, aes(x = as.numeric(trial), y = AUC,
color = condition,
fill  = condition))+
geom_line(alpha = .5, size = 1, show.legend = F) +
geom_ribbon(aes(ymax = AUC + se, ymin = AUC - se),  alpha=0.4) +
geom_point() +
ylab('Mobilized effort (AUC)')+
xlab('Trial')+
scale_color_manual(labels = c('-1'= 'CS-', "1" = 'CS+'), name="",
values = c("1"= pal[2], '-1'= pal[1])) +
scale_fill_manual(labels = c('-1'= 'CS-', "1" = 'CS+'), name="",
values = c("1"= pal[2], '-1'= pal[1])) +
scale_y_continuous(expand = c(0, 0),  limits = c(50,200),  breaks=c(seq.int(50,200, by = 50))) +
scale_x_continuous(expand = c(0, 0),  limits = c(0,15),  breaks=c(seq.int(1,15, by = 2))) +
theme_bw() +
facet_wrap(~group, labeller=labeller(group = labels))
pp + html_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.8, "cm"), axis.text.x = element_text(size = 16))
plt = pp + averaged_theme + theme(strip.background = element_rect(fill="white"), legend.key.size = unit(0.5, "cm"), axis.text.x = element_text(size = 16))
use_docker()
reprouse_docker()
repro::use_docker()
repro::automate()
repro::use_docker()
repro::automate()
repro::use_docker()
repro::automate()
repro::use_docker()
repro::automate()
repro::automate_docker()
repro::automate_make(
)
repro::automate_make()
repro::rerun()
repro::use_docker()
repro::automate_make()
repro::rerun()
repro::automate_make()
repro::automate()
repro::rerun()
repro::automate_make()
repro::automate()
repro::automate()
repro::automate_make()
repro::use_docker()
repro::automate()
repro::check_package()
repro::check_worcs()
repro::check_worcs()
repro::check_worcs()
repro::check_worcs()
repro::check_github_ssh(
)
repro::check_github_ssh()
repro::check_renv()
